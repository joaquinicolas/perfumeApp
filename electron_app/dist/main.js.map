{"version":3,"file":"main.js","sourceRoot":"","sources":["../main.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata';\nimport {app, BrowserWindow, ipcMain} from 'electron';\nimport * as url from 'url';\nimport * as path from 'path';\nimport {Connection, createConnection, getConnection, getConnectionManager} from 'typeorm';\nimport {API} from './api';\nimport {Fragancia} from './entity/Fragancia';\nimport {FraganciaCommodity} from './entity/FraganciaCommodity';\nimport {Commodity} from './entity/Commodity';\nimport * as fs from 'fs';\n\nenum AppEvents {\n  ReadCommodities = 'getCommodities',\n  SaveCommodities = 'saveCommodities',\n  ReadFragancias = 'getFragancias',\n  SaveFragancias = 'saveChanges',\n}\n\nlet dbPath = '/opt/fragancias';\nlet win: BrowserWindow;\n\nfunction createWindow() {\n  win = new BrowserWindow({\n    width: 600,\n    height: 600,\n    backgroundColor: '#ffffff',\n    webPreferences: {\n      nodeIntegration: true\n    },\n  });\n\n  win.loadURL(url.format({\n    pathname: path.resolve(__dirname, '../../dist/index.html'),\n    protocol: 'file:',\n    slashes: true\n  }));\n\n  if (process.platform === 'win32') {\n    dbPath = path.resolve('C://fragancias');\n  }\n\n  if (!fs.existsSync(dbPath)) {\n    fs.mkdirSync(dbPath);\n  }\n  win.webContents.openDevTools();\n\n  win.on('closed', () => {\n    win = null;\n  });\n}\n\napp.on('ready', createWindow);\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n\nipcMain.on('getFragancias', () => {\n  return DB.init()\n    .then(connection => API.getFragancias(connection))\n    .then(fragments => {\n      console.log(fragments);\n      win.webContents.send('getFragancias', fragments);\n    })\n    .catch(err => console.error(err));\n});\n\nipcMain.on('saveChanges', (event, args) => {\n  return DB.init()\n    .then(connection => API.saveChanges(args))\n    .then(f => {\n      win.webContents.send('saveChanges', f);\n    })\n    .catch(err => {\n      console.log(err);\n      win.webContents.send('saveChanges', err);\n    });\n});\n\nipcMain.on(AppEvents.ReadCommodities, async (event, args) => {\n  const conn = await DB.init();\n  try {\n    const commodities = await API.getCommodities(conn);\n    win.webContents.send(AppEvents.ReadCommodities, commodities);\n  } catch (e) {\n    console.log(e);\n    win.webContents.send(AppEvents.ReadCommodities, e);\n  }\n});\n\nipcMain.on(AppEvents.SaveCommodities, async (event, args) => {\n  await DB.init();\n  try {\n    const commodity = await API.saveCommodity(args);\n    win.webContents.send(AppEvents.SaveCommodities, commodity);\n  } catch (e) {\n    console.log(e);\n    win.webContents.send(AppEvents.SaveCommodities, e);\n  }\n});\n\nconst DB = {\n  init: (): Promise<Connection> => {\n    let result;\n    if (!getConnectionManager().has('default')) {\n      result = createConnection({\n        type: 'sqlite',\n        database: path.resolve(dbPath, 'db.sqlite'),\n        synchronize: true,\n        logging: false,\n        entities: [\n          Fragancia,\n          FraganciaCommodity,\n          Commodity\n        ],\n      })\n        .then(connection => {\n          return Promise.resolve(connection);\n        });\n    } else {\n      result = Promise.resolve(getConnection());\n    }\n\n    return result;\n  },\n};\n"]}