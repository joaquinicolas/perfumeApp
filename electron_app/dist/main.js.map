{"version":3,"file":"main.js","sourceRoot":"","sources":["../main.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata';\nimport {app, BrowserWindow, ipcMain} from 'electron';\nimport * as url from 'url';\nimport * as path from 'path';\nimport {Connection, createConnection} from 'typeorm';\nimport {API} from './api';\nimport {Fragancia} from './entity/Fragancia';\nimport {FraganciaCommodity} from './entity/FraganciaCommodity';\nimport {Commodity} from './entity/Commodity';\n\nlet win: BrowserWindow;\n\nfunction createWindow() {\n  win = new BrowserWindow({\n    width: 600,\n    height: 600,\n    backgroundColor: '#ffffff',\n    webPreferences: {\n      nodeIntegration: true\n    },\n  });\n\n  win.loadURL(url.format({\n    pathname: path.resolve(__dirname, '../../dist/index.html'),\n    protocol: 'file:',\n    slashes: true\n  }));\n\n  win.webContents.openDevTools();\n\n  win.on('closed', () => {\n    win = null;\n  });\n}\n\napp.on('ready', createWindow);\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n\nipcMain.on('getFragancias', () => {\n  return DB.init()\n    .then(connection => API.getFragancias(connection))\n    .then(fragments => {\n      win.webContents.send('getFragancias', fragments);\n    })\n    .catch(err => console.error(err));\n});\n\nipcMain.on('saveChanges', (event, args) => {\n  return DB.init()\n    .then(connection => API.saveChanges(connection, args))\n    .then(f => {\n      win.webContents.send('saveChanges', f);\n    })\n    .catch(err => {\n      console.log(err);\n      win.webContents.send('saveChanges', err);\n    });\n});\n\nconst DB = {\n  connection: null,\n  init: (): Promise<Connection> => {\n    let result = Promise.resolve(this.connection);\n    if (!this.connection) {\n      result = createConnection({\n        type: 'sqlite',\n        database: path.resolve(__dirname, '../../db.sqlite'),\n        synchronize: true,\n        logging: false,\n        entities: [\n          Fragancia,\n          FraganciaCommodity,\n          Commodity\n        ],\n      })\n        .then(connection => {\n          this.connection = connection;\n          return Promise.resolve(connection);\n        });\n    }\n\n    return result;\n  },\n};\n"]}