{"version":3,"file":"api.js","sourceRoot":"","sources":["../api.ts"],"names":[],"mappings":"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","sourcesContent":["import {Fragancia, Fragancia_Commodity} from './entity/Fragancia';\nimport {Commodity} from './entity/Commodity';\nimport * as Datastore from 'nedb';\nimport {Store} from './main';\nimport {Observable} from 'rxjs';\n\n\nexport class API {\n  store: Store;\n  static instance: any;\n\n  constructor(store: Store) {\n    if (typeof API.instance === 'object') {\n      return API.instance;\n    }\n    this.store = store;\n    API.instance = this;\n    return this;\n  }\n\n  // private static fraganciasRepository: Repository<Fragancia>;\n\n  // Gets a list of all fragancias.\n  public async getFragancias() {\n    return new Promise((resolve, reject) => {\n      this.store.db.fragancias.find({}, (err, docs) => {\n        if (err) reject(err);\n        resolve(docs);\n      });\n    });\n  }\n\n  CommodityById(id: any): Observable<Commodity> {\n    return new Observable((observer) => {\n      this.store.db.commodities.findOne({_id: id}, (err, doc) => {\n        if (err) return observer.error(err);\n        observer.next(doc);\n        observer.complete();\n      });\n    });\n  }\n\n  public getCommodities(): Promise<Commodity[]> {\n    return new Promise((resolve, reject) => {\n      this.store.db.commodities.find({}, (err, docs) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(docs);\n      });\n    });\n  }\n\n  public async saveCommodity(commodity: Commodity): Promise<Commodity> {\n    return new Promise((resolve, reject) => {\n      this.store.db.commodities.update(\n        {_id: commodity._id},\n        commodity,\n        {upsert: true},\n        (err, numUpdated, upsert) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(commodity);\n        });\n    });\n\n  }\n\n  public async updateFraganciaByCommodity(c: Commodity): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.store.db.fragancias\n        .find({\"Components._id\": c._id}, async (err, docs) => {\n          if (err)\n            return reject(err);\n\n          for (let i = 0; i < docs.length; i++) {\n            const element = docs[i] as Fragancia;\n            element.Cost = element.Components.reduce(\n              (prev, curr) => prev + (curr.Quantity * c.Cost),\n              0);\n\n            element.Price = element.Cost * 2;\n            docs[i] = element;\n\n            try {\n              await this.saveFragancia(element);\n            } catch (e) {\n              reject(e);\n              return;\n            }\n          }\n\n          resolve();\n        });\n    });\n  }\n\n  public async saveFragancia(fragancia: Fragancia): Promise<any> {\n    return new Promise((resolve, reject) => {\n      fragancia.Components = fragancia.Components.map((v) => {\n        return {\n          _id: v._id,\n          Commodity: null,\n          Quantity: v.Quantity,\n        };\n      });\n      if (fragancia._id == null) {\n        delete fragancia._id;\n      }\n      this.store.db.fragancias.update(\n        {_id: fragancia._id},\n        fragancia,\n        {upsert: true},\n        (err, numUpdated, upsert) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(fragancia);\n        });\n    });\n  }\n}\n"]}