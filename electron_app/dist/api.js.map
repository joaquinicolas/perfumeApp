{"version":3,"file":"api.js","sourceRoot":"","sources":["../api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fragancia, Fragancia_Commodity } from './entity/Fragancia';\nimport { Commodity } from './entity/Commodity';\nimport * as Datastore from 'nedb';\nimport { Store } from './main';\nimport { Observable } from 'rxjs';\n\ninterface FraganciaModelView {\n  Description: string;\n  Cost: number;\n  Price: number;\n  totalQuantity: number;\n  Components: CommodityModelView[];\n}\n\n// TODO: remove after refactoring\ninterface CommodityModelView {\n  Description: string;\n  Cost: number;\n  CostByUnit: number;\n  Quantity: number;\n  JoinTableId: number;\n}\n\nexport class API {\n  store: Store;\n  static instance: any;\n\n  constructor(store: Store) {\n    if (typeof API.instance === 'object') {\n      return API.instance;\n    }\n    this.store = store;\n    API.instance = this;\n    return this;\n  }\n  // private static fraganciasRepository: Repository<Fragancia>;\n\n  // Gets a list of all fragancias.\n  public async getFragancias() {\n    return new Promise((resolve, reject) => {\n      this.store.db.fragancias.find({}, (err, docs) => {\n        if (err) reject(err);\n\n        resolve(docs);\n      });\n    });\n  }\n\n  CommodityById(id: any): Observable<Commodity> {\n    return new Observable((observer) => {\n      this.store.db.commodities.findOne({ _id: id }, (err, doc) => {\n        if (err) return observer.error(err);\n        observer.next(doc);\n        observer.complete();\n      });\n    });\n  }\n\n  public getCommodities(): Promise<Commodity[]> {\n    let result: Promise<Commodity[]>;\n\n    this.store.db.commodities.find({}, (err, docs) => {\n      if (err) {\n        result = Promise.reject(err);\n        return;\n      }\n\n      result = Promise.resolve(docs);\n    });\n\n    return result;\n  }\n\n  public async saveCommodity(commodity: Commodity): Promise<Commodity> {\n    let result: Promise<Commodity>;\n    this.store.db.commodities.insert(commodity, (err, doc) => {\n      if (err) {\n        result = Promise.reject(err);\n        return;\n      }\n      result = Promise.resolve(doc);\n    });\n    return result;\n  }\n\n  public async saveFragancia(fragancia: Fragancia): Promise<any> {\n    let result: Promise<any>;\n    fragancia.Components = fragancia.Components.map((v) => {\n      v.Commodity = null;\n      return v;\n    });\n    this.store.db.fragancias.insert(fragancia, (err, newDoc) => {\n      if (err) {\n        result = Promise.reject(err);\n        return;\n      }\n      result = Promise.resolve(newDoc);\n    });\n\n    return result;\n  }\n}\n"]}