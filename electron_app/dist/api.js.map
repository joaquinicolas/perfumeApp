{"version":3,"file":"api.js","sourceRoot":"","sources":["../api.ts"],"names":[],"mappings":"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","sourcesContent":["import {Connection, createQueryBuilder, getConnection, getManager, Repository} from 'typeorm';\nimport {Fragancia} from './entity/Fragancia';\nimport {Commodity} from './entity/Commodity';\nimport {FraganciaCommodity} from './entity/FraganciaCommodity';\n\ninterface FraganciaModelView {\n  Description: string;\n  Cost: number;\n  Price: number;\n  totalQuantity: number;\n  Components: CommodityModelView[];\n}\n\ninterface CommodityModelView {\n  Description: string;\n  Cost: number;\n  CostByUnit: number;\n  Quantity: number;\n  JoinTableId: number;\n}\n\nexport class API {\n  // private static fraganciasRepository: Repository<Fragancia>;\n\n  // Gets a list of all fragancias along with Components.\n  public static async getFragancias(connection: Connection): Promise<FraganciaModelView[]> {\n    let result: Promise<FraganciaModelView[]>;\n    const fraganciasRepository = connection\n      .getRepository(Fragancia);\n    const fragancias = await fraganciasRepository\n      .find({relations: ['Components']});\n    result = Promise.all(\n      fragancias.map(async fragancia => {\n        let totalQuantity = 0;\n        let costFragancia = 0.00;\n        const components = await Promise.all(fragancia.Components.map(async (value) => {\n          const commodity = await this.getCommodity(connection, value.Commodity_description);\n          totalQuantity += value.Quantity;\n          costFragancia += commodity.Cost * value.Quantity;\n          return {\n            Description: commodity.Description,\n            CostByUnit: commodity.Cost, // How much costs a kilogram of commodity?\n            Cost: commodity.Cost * value.Quantity, // How much spends we for x.x grams of commodity?\n            Quantity: value.Quantity,\n            JoinTableId: value.id\n          };\n        }));\n        return {\n          Description: fragancia.Description,\n          Cost: costFragancia,\n          Price: costFragancia * 2,\n          totalQuantity,\n          Components: components\n        };\n      })\n    );\n    return result;\n  }\n\n  // Gets components related to a fragancia.\n  public static getCommodity(connection: Connection, commodityDescription: string): Promise<Commodity> {\n    let result: Promise<Commodity>;\n    const commoditiesRep = connection\n      .getRepository(Commodity);\n\n    result = commoditiesRep\n      .createQueryBuilder()\n      .where(`Description LIKE '${commodityDescription}%'`)\n      .select(['Description AS Description', 'Cost AS Cost'])\n      .getRawOne()\n      .then((rawCommodity) => {\n        if (rawCommodity) {\n          return rawCommodity;\n        }\n        return {};\n      });\n    return result;\n  }\n\n  public static getCommodities(connection: Connection): Promise<Commodity[]> {\n    let result: Promise<Commodity[]>;\n    const commoditiesRep = connection\n      .getRepository(Commodity);\n\n    result = commoditiesRep\n      .find();\n\n    return result;\n  }\n\n  public static async saveCommodity(commodity: Commodity): Promise<Commodity> {\n    let result: Promise<Commodity>;\n    const entityManager = getManager();\n    const c = await entityManager.findOne(Commodity, commodity.Description);\n    c.Cost = commodity.Cost;\n    try {\n      await entityManager.save(c);\n      result = Promise.resolve(commodity);\n    } catch (e) {\n      console.log(e);\n      result = Promise.reject(e);\n    }\n\n    return result;\n  }\n\n  public static async saveChanges(fragancia: FraganciaModelView): Promise<FraganciaModelView> {\n    const entityManager = getManager();\n    const f = await entityManager.findOne(Fragancia, fragancia.Description);\n    if (!f) {\n      return this.createFragancia(fragancia);\n    }\n    f.Description = fragancia.Description;\n    let cost = 0.0;\n    f.Components = await Promise.all(fragancia.Components.map(async component => {\n      const fraganciaCommodity = await entityManager.findOne(FraganciaCommodity, component.JoinTableId);\n      fraganciaCommodity.Fragancia_description = fragancia.Description;\n      fraganciaCommodity.Quantity = component.Quantity;\n      fraganciaCommodity.Commodity_description = component.Description;\n      fraganciaCommodity.id = component.JoinTableId;\n      await entityManager\n        .save(fraganciaCommodity);\n\n\n      cost += component.CostByUnit * fraganciaCommodity.Quantity;\n      return fraganciaCommodity;\n    }));\n\n    f.Price = cost * 2;\n    f.Cost = cost;\n    try {\n      await entityManager\n        .save(f);\n      fragancia.Cost = f.Cost;\n      fragancia.Price = f.Price;\n      return Promise.resolve(fragancia);\n    } catch (e) {\n      console.log(e);\n      return Promise.reject(e);\n    }\n  }\n\n  private static async createFragancia(fragancia: FraganciaModelView): Promise<FraganciaModelView> {\n    const manager = getManager();\n    const f = new Fragancia();\n    f.Description = fragancia.Description;\n    f.Price = fragancia.Price;\n    f.Cost = fragancia.Cost;\n    f.Components = await Promise.all(fragancia.Components.map(async value => {\n      const fc = new FraganciaCommodity();\n      fc.Quantity = value.Quantity;\n      fc.Fragancia_description = fragancia.Description;\n      fc.Commodity_description = value.Description;\n\n      await manager\n        .save(fc);\n\n      return fc;\n    }));\n\n    await manager.save(f);\n    return Promise.resolve(fragancia);\n  }\n}\n"]}