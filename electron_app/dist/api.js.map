{"version":3,"file":"api.js","sourceRoot":"","sources":["../api.ts"],"names":[],"mappings":"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","sourcesContent":["import {Connection, createQueryBuilder, getConnection, getManager, Repository} from 'typeorm';\nimport {Fragancia} from './entity/Fragancia';\nimport {Commodity} from './entity/Commodity';\nimport {FraganciaCommodity} from './entity/FraganciaCommodity';\n\ninterface FraganciaModelView {\n  id: number;\n  Description: string;\n  Cost: number;\n  Price: number;\n  Components: CommodityModelView[];\n}\n\ninterface CommodityModelView {\n  id: number;\n  Description: string;\n  Cost: number;\n  CostByUnit: number;\n  Quantity: number;\n  JoinTableId: number;\n}\n\nexport class API {\n  // private static fraganciasRepository: Repository<Fragancia>;\n\n  // Gets a list of all fragancias along with Components.\n  public static async getFragancias(connection: Connection): Promise<FraganciaModelView[]> {\n    let result: Promise<FraganciaModelView[]>;\n    const fraganciasRepository = connection\n      .getRepository(Fragancia);\n    const fragancias = await fraganciasRepository\n      .find({relations: ['Components']});\n    result = Promise.all(\n      fragancias.map(async fragancia => {\n        const components = await Promise.all(fragancia.Components.map(async (value) => {\n          const commodity = await this.getCommodities(connection, value.Commodity_id);\n          return {\n            id: value.Commodity_id,\n            Description: commodity.Description,\n            CostByUnit: commodity.Cost, // How much costs a kilogram of commodity?\n            Cost: commodity.Cost * value.Quantity, // How much spends we for x.x grams of commodity?\n            Quantity: value.Quantity,\n            JoinTableId: value.id\n          };\n        }));\n        return {\n          id: fragancia.id,\n          Description: fragancia.Description,\n          Cost: fragancia.Cost,\n          Price: fragancia.Price,\n          Components: components\n        };\n      })\n    );\n    return result;\n  }\n\n  // Gets components related to a fragancia.\n  public static getCommodities(connection: Connection, commodityId: number): Promise<Commodity> {\n    let result: Promise<Commodity>;\n    const commoditiesRep = connection\n      .getRepository(Commodity);\n\n    result = commoditiesRep\n      .createQueryBuilder()\n      .where(`id = ${commodityId}`)\n      .select(['Description AS Description', 'Cost AS Cost'])\n      .getRawOne()\n      .then((rawCommodity) => {\n        if (rawCommodity) {\n          return rawCommodity;\n        }\n        return {};\n      });\n    return result;\n  }\n\n  public static async saveChanges(connection: Connection, fragancia: FraganciaModelView): Promise<FraganciaModelView> {\n    const f = new Fragancia();\n    f.id = fragancia.id;\n    f.Description = fragancia.Description;\n    f.Components = fragancia.Components.map(component => {\n      const fraganciaCommodity = new FraganciaCommodity();\n      fraganciaCommodity.Fragancia_id = fragancia.id;\n      fraganciaCommodity.Quantity = component.Quantity;\n      fraganciaCommodity.Commodity_id = component.id;\n      fraganciaCommodity.id = component.JoinTableId;\n\n      const commodity = new Commodity();\n      commodity.id = component.id;\n      commodity.Cost = component.CostByUnit;\n      commodity.Description = component.Description;\n      fraganciaCommodity.commodity = commodity;\n\n      return fraganciaCommodity;\n    });\n\n    let cost = 0.0;\n    fragancia.Components\n      .forEach(component => cost += component.CostByUnit * component.Quantity);\n    f.Price = cost * 2;\n    f.Cost = cost;\n    try {\n      await getConnection()\n        .manager\n        .save(f);\n      fragancia.Cost = f.Cost;\n      fragancia.Price = f.Price;\n      return fragancia;\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  }\n}\n"]}